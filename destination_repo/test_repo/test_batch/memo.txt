chmod +x migrate_repos.sh   # 初回のみ実行権限を付与
./migrate_repos.sh


`destination_repo` と `temp_clone_dir` は、このスクリプトの中での**一時的な作業用フォルダ**で、それぞれ**明確な役割**

---

## 🗂️ `temp_clone_dir` の用途（クローン用一時領域）

### ✅ 目的

`repos.txt` に書かれた複数のリポジトリを**一時的に shallow clone（履歴なし）** する作業用ディレクトリ

### ✅ 具体的な処理の流れ

```bash
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"
```

その後、以下のような操作が繰り返されます：

```bash
git clone --depth 1 "$SRC_REPO_URL" "$REPO_NAME"
rsync -av ... "$REPO_NAME/" "../destination_repo/${REPO_NAME}/"
```

つまり、

* `temp_clone_dir/repo-a/` などに一時的に clone
* `.git` フォルダを除いたソースコードのみを `destination_repo/` にコピー
* clone 後は不要になる（最終的に消してもOK）

---

## 📁 `destination_repo` の用途（Push先の実体）

### ✅ 目的

**宛先リポジトリ（1つ）をクローンして、内容をここに統合して Push するための作業ディレクトリ**です。

### ✅ 具体的な処理の流れ

```bash
git clone "$DEST_REPO_URL" "$DEST_WORK_DIR"
```

つまり、

* `https://github.com/sh-16rb/batch_test.git` を `destination_repo/` にクローン
* そこに `repo-a/`, `repo-b/` というようにサブディレクトリとして各リポジトリを格納
* 最後に `git add . && git commit && git push` を実行してすべてまとめて反映

---

## 🔁 全体の処理イメージ（図解）

```plaintext
repos.txt に記載された複数のソース
   │
   ├─> temp_clone_dir/repo-a/ ←── git clone（履歴なし）
   │                          └── rsyncでコピー（.git除外）
   ├─> temp_clone_dir/repo-b/
   └─> temp_clone_dir/repo-c/

destination_repo/
   ├── repo-a/（ここにコピー）
   ├── repo-b/
   └── repo-c/
     ↑
PushされるGitHubの宛先リポジトリ
```

---

## ✅ 処理終了後の状態

* `temp_clone_dir/` は削除して問題なし（中間生成物）
* `destination_repo/` は、Pushまで終われば空にしても問題なし

  * ただし、再Pushの確認や変更追跡したい場合は残してもOK

---

## 💬 補足：これらを分けている理由

| 理由                              | 内容                                     |
| ------------------------------- | -------------------------------------- |
| 一時クローンと最終成果物を分離                 | クリーンで安全なファイル操作のため                      |
| `.git` ディレクトリの混入防止              | 元リポジトリの履歴が混ざらないようにするため                 |
| `destination_repo` にだけ Git操作を集中 | add / commit / push すべてこのディレクトリ内で完結させる |

chmod +x migrate_repos.sh   # 初回のみ実行権限を付与
./migrate_repos.sh


`destination_repo` と `temp_clone_dir` は、このスクリプトの中での**一時的な作業用フォルダ**で、それぞれ**明確な役割**

---

## 🗂️ `temp_clone_dir` の用途（クローン用一時領域）

### ✅ 目的

`repos.txt` に書かれた複数のリポジトリを**一時的に shallow clone（履歴なし）** する作業用ディレクトリ

### ✅ 具体的な処理の流れ

```bash
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"
```

その後、以下のような操作が繰り返されます：

```bash
git clone --depth 1 "$SRC_REPO_URL" "$REPO_NAME"
rsync -av ... "$REPO_NAME/" "../destination_repo/${REPO_NAME}/"
```

つまり、

* `temp_clone_dir/repo-a/` などに一時的に clone
* `.git` フォルダを除いたソースコードのみを `destination_repo/` にコピー
* clone 後は不要になる（最終的に消してもOK）

---

## 📁 `destination_repo` の用途（Push先の実体）

### ✅ 目的

**宛先リポジトリ（1つ）をクローンして、内容をここに統合して Push するための作業ディレクトリ**です。

### ✅ 具体的な処理の流れ

```bash
git clone "$DEST_REPO_URL" "$DEST_WORK_DIR"
```

つまり、

* `https://github.com/sh-16rb/batch_test.git` を `destination_repo/` にクローン
* そこに `repo-a/`, `repo-b/` というようにサブディレクトリとして各リポジトリを格納
* 最後に `git add . && git commit && git push` を実行してすべてまとめて反映

---

## 🔁 全体の処理イメージ（図解）

```plaintext
repos.txt に記載された複数のソース
   │
   ├─> temp_clone_dir/repo-a/ ←── git clone（履歴なし）
   │                          └── rsyncでコピー（.git除外）
   ├─> temp_clone_dir/repo-b/
   └─> temp_clone_dir/repo-c/

destination_repo/
   ├── repo-a/（ここにコピー）
   ├── repo-b/
   └── repo-c/
     ↑
PushされるGitHubの宛先リポジトリ
```

---

## ✅ 処理終了後の状態

* `temp_clone_dir/` は削除して問題なし（中間生成物）
* `destination_repo/` は、Pushまで終われば空にしても問題なし

  * ただし、再Pushの確認や変更追跡したい場合は残してもOK

---

## 💬 補足：これらを分けている理由

| 理由                              | 内容                                     |
| ------------------------------- | -------------------------------------- |
| 一時クローンと最終成果物を分離                 | クリーンで安全なファイル操作のため                      |
| `.git` ディレクトリの混入防止              | 元リポジトリの履歴が混ざらないようにするため                 |
| `destination_repo` にだけ Git操作を集中 | add / commit / push すべてこのディレクトリ内で完結させる |

